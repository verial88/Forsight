childrens = {
    'имя1': ['класс11', 'класс21'],
    'имя2': ['класс12', 'класс21'],
    'имя3': ['класс11', 'класс22'],
    'имя4': ['класс12', 'класс21'],
    'имя5': ['класс11', 'класс21'],
}

classifiers = {
    'классификатор1': ['класс11', 'класс12'],
    'классификатор2': ['класс21', 'класс22'],
}

class Tree():
    """Данный класс явлеяется конструктором для динамического построения дерева Tree.
    На вход подается список классификаторов, соответствующих уровням иерархии дерева.
    """
    def __init__(self, *args):
        """ строит дерево согласно уровням иерархии """
        self.args = args
        global childrens
        for arg in args: # для классификатора из набора классификаторов
            for el in arg: # для каждого класса в текущем классификаторе
                for child in childrens.keys(): # для каждого наследника в перечне наследников
                    if el in childrens[child]: # если наследник наследуется от класса в текущем классификаторе
                        print(el, child)

    def get_children(self, *args):
        """
        Данный метод принимает набор пар классификатор-класс,
        и возвращает список детей для конкретного уровня дерева.
        """
        pass

cl_er1 = ['класс11', 'класс12']
cl_er2 = ['класс21', 'класс22']

Tree(cl_er1, cl_er2)



